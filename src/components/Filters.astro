---
import colorData from "../data/colors.json";

// const groupsArray = colorData.map((colorObject) => colorObject.group);
// const uniqueGroupsArray = [...new Set(groupsArray)];

let colorsObject = {};

colorData.forEach((color) => {
  let colorGroup = color.group;

  if (colorsObject[colorGroup]) {
    let count = colorsObject[colorGroup].count;
    colorsObject[colorGroup].count++;
  } else {
    colorsObject[colorGroup] = {
      name: colorGroup,
      count: 1,
    };
  }
});

const uniqueGroupsArray = Object.values(colorsObject);
---

<div class="filtering">
  <h2 class="filtering__title">Filter colors:</h2>
  <ul class="filteringList noList flow">
    <li class="filteringList__item">
      <button class="filter active" data-filter="all">
        <span class="filter__name">
          <span class="swatch"></span>
          All
        </span>
        <span class="count">{colorData.length}</span>
      </button>
    </li>

    {
      uniqueGroupsArray.map((color) => (
        <li class="filteringList__item">
          <button class="filter" data-filter={color.name.toLowerCase()}>
            <span class="filter__name">
              <span class="swatch" />
              {color.name}
            </span>
            <span class="count">{color.count}</span>
          </button>
        </li>
      ))
    }
  </ul>
</div>

<script is:inline>
  const filters = document.querySelectorAll(".filter");

  filters.forEach((filter) => {
    filter.addEventListener("click", function () {
      let selectedFilter = filter.getAttribute("data-filter");
      let itemsToHide = document.querySelectorAll(
        `.colorGrid__item:not([data-filter='${selectedFilter}'])`
      );
      let itemsToShow = document.querySelectorAll(
        `.colorGrid [data-filter='${selectedFilter}']`
      );

      filters.forEach((filter) => {
        filter.classList.remove("active");
      });

      this.classList.add("active");

      if (selectedFilter == "all") {
        itemsToHide = [];
        itemsToShow = document.querySelectorAll(".colorGrid__item");
      }

      itemsToHide.forEach((el) => {
        el.classList.add("hide");
        el.classList.remove("show");
      });

      itemsToShow.forEach((el) => {
        el.classList.remove("hide");
        el.classList.add("show");
      });

      toggleFilters();
    });
  });

  // Trigger Filters on Mobile
  function toggleFilters() {
    const filters = document.querySelector(".header__bottom");

    if (filters.classList.contains("is-visible")) {
      filters.classList.remove("is-visible");
    } else {
      filters.classList.add("is-visible");
    }
  }

  const filterTrigger = document.querySelector(".filterTrigger");
  filterTrigger.addEventListener("click", toggleFilters);
</script>

<style lang="scss">
  h2 {
    font-size: var(--step-0);
    font-weight: normal;
    font-family: "Atkinson", sans-serif;
  }

  .filtering {
    --flow-space: 1.5em;
  }

  .filteringList {
    --flow-space: 0.5em;
  }

  .filter {
    background-color: var(--surface3);
    padding: var(--space-2xs);
    width: 100%;
    border: none;
    color: var(--text-color);
    display: flex;
    justify-content: space-between;
    position: relative;
    font-size: 0.9em;
    position: relative;

    &__name {
      display: flex;
      gap: 0.5em;
      align-items: center;
    }

    .count {
      opacity: 0.5;
    }

    &:hover,
    &:focus {
      background-color: rgba(255, 255, 255, 0.3);
    }
    &:hover {
      cursor: pointer;
    }
    &.active {
      background-color: rgba(255, 255, 255, 0.2);
    }

    .swatch {
      display: block;
      height: 1em;
      width: 1em;
      aspect-ratio: 1;
      background-color: white;
    }

    &[data-filter="all"] .swatch {
      background-image: url(../img/147swatches.svg);
      background-size: 100% 100%;
    }
    &[data-filter="pink"] .swatch {
      background-color: pink;
    }
    &[data-filter="red"] .swatch {
      background-color: red;
    }
    &[data-filter="orange"] .swatch {
      background-color: orange;
    }
    &[data-filter="yellow"] .swatch {
      background-color: yellow;
    }
    &[data-filter="brown"] .swatch {
      background-color: brown;
    }
    &[data-filter="green"] .swatch {
      background-color: green;
    }
    &[data-filter="cyan"] .swatch {
      background-color: cyan;
    }
    &[data-filter="blue"] .swatch {
      background-color: blue;
    }
    &[data-filter="purple"] .swatch {
      background-color: purple;
    }
    &[data-filter="gray"] .swatch {
      background-color: gray;
    }
  }
</style>
