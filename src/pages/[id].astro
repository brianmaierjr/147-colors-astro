---
import Layout from "../layouts/Layout.astro";
import BackLink from "../components/BackLink.astro";
import colorData from "../data/colors.json";

export async function getStaticPaths() {
    return colorData.map((color) => {
        return {
            params: { id: color.name.toLowerCase() },
            props: { color },
        };
    });
}
const { id } = Astro.params;
const { color } = Astro.props;
---

<Layout title={`147 Colors | ${color.name}`}>
    <div
        class={`flow color ${color.theme}`.toLowerCase()}
        style={`background-color: ${color.name};`}
    >
        <h1>
            {color.name}
        </h1>
        <div class="color-inputs">
            <input
                type="text"
                id="name"
                value={`${color.name}`.toLowerCase()}
            />
            <input type="text" id="hex" value={`#${color.hex}`} />
            <input type="text" id="rgb" value={`(${color.rgb})`} />
        </div>
        <div class="color-btns">
            <button data-id="hex" onclick="copyColor('hex')">
                <span>HEX</span>
                <span>#{color.hex}</span>
                <svg
                    version="1.1"
                    id="Layer_1"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    x="0px"
                    y="0px"
                    viewBox="0 0 144.5 144.5"
                    style="enable-background:new 0 0 144.5 144.5;"
                    xml:space="preserve"
                >
                    <path
                        d="M138.2,0.2h-96c-3.3,0-6,2.7-6,6v30h-30c-3.3,0-6,2.7-6,6v96c0,3.3,2.7,6,6,6h96c3.3,0,6-2.7,6-6v-30h30c3.3,0,6-2.7,6-6
       v-96C144.2,2.9,141.5,0.2,138.2,0.2z M96.2,132.2h-84v-84h84V132.2z M132.2,96.2h-24v-54c0-3.3-2.7-6-6-6h-54v-24h84V96.2z"
                    ></path>
                </svg>
            </button>
            <button data-id="rgb" onclick="copyColor('rgb')">
                <span>RGB</span>
                <span>({color.rgb})</span>
                <svg
                    version="1.1"
                    id="Layer_1"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    x="0px"
                    y="0px"
                    viewBox="0 0 144.5 144.5"
                    style="enable-background:new 0 0 144.5 144.5;"
                    xml:space="preserve"
                >
                    <path
                        d="M138.2,0.2h-96c-3.3,0-6,2.7-6,6v30h-30c-3.3,0-6,2.7-6,6v96c0,3.3,2.7,6,6,6h96c3.3,0,6-2.7,6-6v-30h30c3.3,0,6-2.7,6-6
     v-96C144.2,2.9,141.5,0.2,138.2,0.2z M96.2,132.2h-84v-84h84V132.2z M132.2,96.2h-24v-54c0-3.3-2.7-6-6-6h-54v-24h84V96.2z"
                    ></path>
                </svg>
            </button>
        </div>

        <BackLink />

        <a href="https://brianmaierjr.com" class="my-link" target="_blank"
            >Who made this?<span class="sr-only"> opens in a new tab</span>
        </a>
    </div>
</Layout>

<script is:inline>
    function copyColor(id) {
        // Get the text field
        var copyText = document.getElementById(id);

        // Select the text field
        copyText.select();
        copyText.setSelectionRange(0, 99999); // For mobile devices

        // Copy the text inside the text field
        navigator.clipboard.writeText(copyText.value);

        // Add class to button to show before
        const copyBtn = document.querySelector('button[data-id="' + id + '"]');
        copyBtn.classList.add("copied");

        // Remove before after 2 seconds
        setTimeout(() => {
            copyBtn.classList.remove("copied");
        }, "1000");
    }
</script>

<style lang="scss">
    body {
        height: 100dvh;
        height: 100vh;
        width: 100dvw;
        width: 100vw;
        margin: 0;
        padding: var(--space-xl);
        display: grid;
        place-content: center;
        text-align: center;
    }

    .color {
        border: var(--space-s-l) solid white;
        width: 100vdw;
        width: 100vw;
        height: 100dvh;
        height: 100vh;
        display: grid;
        place-content: center;
        padding: var(--space-s-l);
    }

    h1 {
        font-size: 8vw;
        word-break: break-all;
        --flow-space: var(--space-m);
        text-align: center;
        margin-bottom: 2rem;
    }

    .dark {
        color: white;

        a,
        button {
            color: white;
        }

        button:not(.back-link) {
            background-color: rgba(0, 0, 0, 0.1);

            &:hover,
            &:focus {
                background-color: rgba(0, 0, 0, 0.2);
            }
        }
    }

    .light {
        color: black;

        a,
        button {
            color: black;
        }

        button {
            background-color: rgba(255, 255, 255, 0.2);

            &:hover,
            &:focus {
                background-color: rgba(255, 255, 255, 0.6);
            }

            &:before {
                background-color: black;
                color: white;
            }
        }
    }

    .color-btns {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        --flow-space: 2rem;
        flex-direction: column;
        gap: 0.5em;

        @media (min-width: 480px) {
            flex-direction: row;
        }
    }

    button {
        border: 0;
        padding: var(--space-xs);
        transition: 0.2s all ease-in-out;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 1rem;
        position: relative;

        svg {
            fill: currentColor;
            stroke: currentColor;
            height: 1em;
            width: auto;
        }

        &:last-child {
            margin-right: 0;
        }

        &:before {
            content: "Copied!";
            visibility: hidden;
            position: absolute;
            bottom: calc(100% + 0.5em);
            left: 50%;
            transform: translateX(-50%) translateY(calc(100% + 0.5em));
            opacity: 0;
            transition: 0.1s all ease-in-out;
            padding: var(--space-2xs) var(--space-xs);
            background-color: white;
            color: black;
            border-radius: 0.25rem;
            font-size: var(--step--1);
        }

        &.copied {
            &:before {
                visibility: visible;
                transform: translateX(-50%) translateY(0);
                opacity: 1;
            }
        }
    }

    .color-inputs {
        display: none;
    }

    .my-link {
        position: absolute;
        bottom: calc(var(--space-s-l) + 1em);
        left: 50%;
        transform: translateX(-50%);
        text-decoration: none;
        font-size: var(--step--2);

        &:focus,
        &:hover {
            text-decoration: underline;
        }
    }
</style>
